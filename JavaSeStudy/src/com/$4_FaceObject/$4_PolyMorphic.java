package com.$4_FaceObject;

/*
    多态概述:
        多态:指同类型的对象, 执行同一个行为, 会表现出不同的行为特征
            常见形式:
                父类类型 对象名称 = new 子类构造器;
                接口 对象名称 = new 实现类构造器;
            成员访问特点:
                方法调用:编译看左边, 运行看右边
                变量调用:编译看左边, 运行也看左边 （多态侧重行为多态）
        使用多态前提:
            1. 有继承/实现关系
            2. 有父类引用指向子类对象
            3. 有方法重写
        多态的优势:
            1. 多态形势下, 右边对象可以实现解耦合, 便于拓展和维护
            2. 定义方法时, 使用父类作为参数, 该方法就可以接收到该父类的一切子类对象, 体现出多态的扩展性与便利
        多态的弊端:
            多态对象不能调用子类独有功能
        多态类型转换:
            自动类型转换(从子到父):子类对象赋值给父类类型的变量指向
            强制类型转换(从父到子):子类 对象变量 = (子类)父类类型的变量
                作用:可以解决多态下的劣势, 可以实现调用子类独有的功能
                    注意:如果强制转换后的类型和对象的真实类型不一致, 转换时会出现CalssCastException异常
                    Java建议强制转换前使用instanceof关键字判断当前对象的真实类型
                        格式:
                            变量名 instanceof 真实类型
                            判断关键字左边的变量指向的对象的真是类型, 是否为右边的类型或其子类型, 是则返回true, 反之返回false
 */

public class $4_PolyMorphic {
}
