package com.$4_FaceObject;
/*
    抽象类:
    父类只定义功能的基本要求, 具体实现由子类完成, 这样的父类就是抽象类
     抽象类就是一种不完全的设计图！！
     定义格式:
        修饰符 abstract class 类名 {
        }
    抽象方法:
        指抽象类中定义的子类必须完成的功能的基本要求
        定义格式:
            修饰符 abstract 返回值类型 方法名称(形参列表);
        抽象方法只有方法签名, 没有方法体, 必须使用abstract修饰
    抽象类使用注意事项:
        1.抽象类是被用来继承的, 抽象方法是交给子类重写实现的
        2.一个类如果继承类抽象类, 那么这个类必须重写完抽象类的全部抽象方法
            否则这个类也必须定义成抽象类
    抽象类的作用:
        可以被子类继承, 充当模板, 同时也可以提高代码复用
    
    抽象类的特征:
        1. 有得有失:得到了抽象方法, 失去了创建对象的能力
        2. 普通类有的成员(成员变量, 方法, 构造器)抽象类都具备
        3. 抽象类不一定有抽象方法, 有抽象方法的类一定是抽象类
        4. 一个类如果继承类抽象类, 那么这个类必须重写完抽象类的全部抽象方法
           否则这个类也必须定义成抽象类
        5. 不能用abstract修饰变量, 代码块, 构造器
    拓展:
        final和abstract:互斥关系
            abstract定义抽象类, 作为模板需要子类继承实现
            final定义最终类, 不能再被其他类继承
    抽象类应用知识:模板方法模式
        使用场景说明:
            当系统中出现同一个功能多处在开发, 而该功能中大部分代码是一样的, 只有其中部分代码可能不同时
        实现步骤:
            1.把功能定义成一个所谓的模板方法, 放在抽象类中, 模板方法中定义通用且能确定的代码
            2.模板方法中不能决定的功能定义成抽象方法让具体的子类实现
            3.模板方法建议使用final进行修饰, 防止子类对模板方法进行重写
 */
public class $5_AbstractClass {
}
