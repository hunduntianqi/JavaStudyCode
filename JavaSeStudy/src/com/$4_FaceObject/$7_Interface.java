package com.$4_FaceObject;

/*
    接口:
        指体现规范的, 其中用抽象方法定义的一组行为规范, 接口是更加彻底的抽象
        接口体现了现实世界中"如果你是这类事物...则必须完成某些行为..."的思想
        接口定义格式:
            JDK8版本之前:
            public interface 接口名 {
                // 常量
                // 抽象方法
            }
        接口特点:
            1.JDK8之前的接口中只能是抽象方法和常量, 没有其他成分
            2.接口不能实例化(创建对象)
            3.接口中的成员无论加不加修饰符, 都是默认有public修饰的, 接口规范的目的是为了公开化
        接口的基本使用-被实现:
            接口是用来被类实现(implements)的, 实现接口的类称为实现类, 类似子类继承抽象父类的关系
            实现格式:
                修饰符 class implements 接口1, 接口2, ...{
                }
                实现的关键字:implements
                接口可以被类单实现, 也可以多实现
            注意:
                一个类实现接口, 必须实现全部接口的全部抽象方法, 否则该类也要定义为抽象类
        类与类的关系:单继承
        类与接口的关系:多实现
        接口与接口的关系:多继承
            作用:规范合并, 整合多个接口为一个接口, 便于子类实现
            注意:两个接口中存在相同名称, 返回值不同的抽象方法时, 不能继承
        JDK8之后接口新增功能:
            1. 定义默认方法:
                类似普通实例方法, 必须用default修饰(默认会用public修饰), 默认方法需要通过接口实现类的对象调用
                    格式:
                        default void run() {
                            System.out.println("---开始跑---");
                        }
           2. 定义静态方法:
                必须用static修饰, 默认会使用public修饰
                注意:接口的静态方法必须用本身的接口名调用
                    格式:
                        static void inAddr() {
                            System.out.println("---我们都在黑马培训中心快乐的学Java!---");
                        }
           3. 定义私有方法:
                必须使用private修饰(JDK1.9版本开始有)
                只能在本类中被其他的默认方法或者私有方法访问(只能在接口内部调用)
                private void go () {
                    System.out.println("---准备---");
                }
        接口注意事项:
            1.接口不能创建对象
            2.一个类实现多个接口, 多个接口有同名静态方法时, 不冲突, 因为静态方法只允许通过接口名访问
            3.一个类继承父类, 同时实现接口, 父类和接口中有同名方法时, 默认使用父类的方法
            4.一个类实现多个接口, 多个接口存在同名默认方法, 不冲突, 实现类重写该方法即可
            5.一个接口可继承多个接口, 但如果多个接口中存在规范冲突则不能多继承
 */

public class $7_Interface {
}
