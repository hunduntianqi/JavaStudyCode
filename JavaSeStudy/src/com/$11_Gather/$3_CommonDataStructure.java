package com.$11_Gather;

/*
    数据结构:
        是指计算机底层存储, 组织数据的方式, 是指数据相互之间释义什么方式排列在一起
        通常情况下, 精心选择的数据结构可以带来更高的运行或者存储效率
    常见数据结构:
        1. 栈
            数据执行特点:
                后进先出, 先进后出, 一段开口为栈顶, 一段闭口为栈低
                数据进入栈:压 / 进 栈
                数据离开栈:弹 / 出 栈
        2. 队列
            数据执行特点:
                先进先出, 后进后出, 一端开口为前端, 一端开口为后端
                入队列:数据从后端进入队列
                出队列:数据从前端离开队列
        3. 数组
            数据特点:
                查询快, 增删慢, 元素在内存中是连续存储的
                查询速度快:通过地址值和索引定位, 查询任意数据耗时相同
                删除效率低:要将原始数据删除, 同时后面每个数据前移
                添加效率极低:添加位置后的每个数据后移, 再添加元素
        4. 链表
            数据特点:
                元素在内存中不连续存储, 每个元素节点数据包含数据值和下一个元素的地址
                查询慢:无论查询哪个数据, 都要从头开始找
                链表增删相对快
            链表的种类:
                单向链表:只能从前往后找
                双向链表:可以从前往后找, 也可以从后往前找
        5. 二叉树
            永远只有一个根节点, 每一个节点上最多只有两个子节点
        6. 二叉查找树
            又称二叉排序树或者二叉搜索树
            特点:
                1. 每一个节点上最多有两个子节点
                2. 左子树上所有节点的值都小于根节点的值
                3. 右子树上所有节点的值都大于根节点的值
                目的:提高检索数据的性能
        7. 平衡二叉树
            在满足查找二叉树的大小规则下, 让树尽可能矮小, 以此提高查询数据的性能
            要求:
                任意节点的左右两个子树的高度差不超过1, 任意节点的左右两个子树都是一颗平衡二叉树
        8. 红黑树(根据红黑规则实现自平衡的二叉树)
            1. 每一个节点或是红色或是黑色, 根节点必须是黑色
            2. 如果一个节点没有子节点或者父节点, 则该节点相应的指针属性值为Nil, 这些Nil视为叶节点, 叶节点是黑色的
            3. 如果某一个节点是红色, 那么他的子节点必须是黑色(不能出现两个红色节点相连的情况)
            4. 对每一个节点, 从该节点到其后所有后代叶节点的简单路径上, 均包含相同数目的黑色节点
            添加节点的颜色可以是红色的, 也可以是黑色的, 默认使用红色节点效率高
            红黑树增删改查性能都很好

 */

public class $3_CommonDataStructure {
}
