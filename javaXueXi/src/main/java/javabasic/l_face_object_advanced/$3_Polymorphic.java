package javabasic.l_face_object_advanced;

/*
    多态概述:
        多态: 指同类型的对象, 表现出不同的形态
        多态表现形式:
            父类类型 对象名称 = new 子类构造器;
            接口 对象名称 = new 实现类构造器;
        多态实现的前提:
            1. 有继承 / 实现关系存在
            2. 有父类引用指向子类对象
            3. 有方法重写
        多态的优势:
            1. 多态形势下, 右边对象可以实现解耦合, 便于拓展和维护
            2. 定义方法时, 使用父类作为参数, 该方法就可以接收到该父类的一切子类对象, 体现出多态的扩展性与便利
        多态的弊端:
            多态对象不能调用子类独有功能
        多态调用成员的特点:
            1. 变量调用: 编译看左边, 运行也看左边
                1.1 编译看左边: javac在编译代码时, 会看左边的父类中有没有对应的变量, 如果有, 编译成功; 如果没有, 编译失败
                1.2 运行也看左边: java运行代码时, 实际获取的也是左边父类中成员变量的值
            2. 方法调用: 编译看左边, 运行看右边
                2.1 编译看左边: javac在编译代码时, 会看左边的父类中有没有这个方法, 如果有, 编译成功; 如果没有, 编译失败
                2.2 运行看右边: java运行代码时, 实际上运行的是子类中重写的方法
    多态类型转换:
        用于解决多态对象不能调用子类特有功能的弊端
        自动类型转换(从子到父):子类对象赋值给父类类型的变量指向
        强制类型转换(从父到子):子类 对象变量 = (子类)父类类型的变量
            作用:可以解决多态下的劣势, 可以实现调用子类独有的功能
                注意:如果强制转换后的类型和对象的真实类型不一致, 转换时会出现CalssCastException异常
                Java建议强制转换前使用instanceof关键字判断当前对象的真实类型
                    格式:
                        变量名 instanceof 真实类型
                        判断关键字左边的变量指向的对象的真是类型, 是否为右边的类型或其子类型, 是则返回true, 反之返回false
                    JDK14新特性:
                        变量名 instanceof 真实类型 变量名2:
                            先判断, 后转换类型:
                                1. 判断为真时, 将对象转换类型, 对象名为变量名2;
                                2. 判断为假时, 直接返回false, 对象类型不做转换
 */
public class $3_Polymorphic {
}
