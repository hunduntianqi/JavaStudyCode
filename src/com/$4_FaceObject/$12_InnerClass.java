package com.$4_FaceObject;

/*
    内部类:
        指定义在一个类里面的类, 里面的类可以理解成寄生, 外部类可以理解成宿主
        定义格式:
            public class 外部类名 {
                // 内部类
                public class 内部类名 {
    
                }
            }
    内部类的使用场景:
        当一个事物的内部还有一部分需要一个完整的结构进行描述, 而这个内部的完整结构又只为外部事物提供服务
        那么整个内部的完整结构可以选择使用内部类设计
    内部类的作用:
        1.内部类通常可以方便访问外部类的成员, 包括私有成员
        2.内部类提供了更好的封装性, 内部类本身可以用private/protected修饰, 封装性可以做更多控制
    内部类分类:
        1.静态内部类(了解):
            有static 修饰, 属于外部类本身, 特点和使用与普通类完全一致, 类的成分都有, 只是位置在类里面
            定义格式:
                public class Outer{
                    // 静态成员内部类
                    public static class Inner{

                    }
                }
            对象创建格式:
                外部类名.内部类名 对象名 = new 外部类名.内部构造器;
                例:Outer.Inner in = new Outer.Inner();
            注意:
                1. 静态内部类可以直接访问外部类的静态成员
                2. 静态内部类不可以直接访问外部类的实例成员, 必须先创建外部类对象, 再进行访问
        2.成员内部类(了解):
            无static修饰, 属于外部类的对象
            JDK16之前, 成员内部类中不可以定义静态成员, 从JDK16开始, 成员内部类可以定义静态成员
            定义格式:
                public class Outer {
                    // 定义成员内部类
                    public class Inner {

                    }
                }
            对象创建格式:
                外部类名.内部类名 对象名 = new 外部类构造器.new 内部类构造器();
                例:Outer.Inner in = new Outer().new Inner();
                注意:
                    1.成员内部类可以直接访问外部类的静态成员
                    2.成员内部类的实例方法可以直接访问外部类的实例成员, 因为必须先有外部类对象才能有成员
                       内部类对象
                    3.在成员内部类中访问所在外部类对象格式:外部类名.this
        3.局部内部类(鸡肋语法, 了解):
            放在方法, 代码块、构造器等执行体中
            局部内部类的类文件名为:外部类$N内部类.class
        4.匿名内部类(重点):
            本质上是没有名字的局部内部类, 定义在方法中, 代码块中等
            作用:方便创建子类对象, 最终目的为了简化代码的编写
            格式:
                new 类|抽象类名|接口名 () {
                    重写方法;
                };
                例:
                    Employee a = new Employee() {
                        重写方法
                    };
                    a.重写方法;
            特点:
                1.匿名内部类是一个没有名字的内部类
                2.匿名内部类写出来就会产生一个匿名内部类的对象
                3.匿名内部类的对象类型相当于是当前new的那个类型的子类型
                4.匿名内部类可以作为方法的实际参数进行传输
 */
public class $12_InnerClass {
}
