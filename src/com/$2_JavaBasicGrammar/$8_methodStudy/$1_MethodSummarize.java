package com.$2_JavaBasicGrammar.$8_methodStudy;

/*
    方法:
        指一种语法结构, 可以把代码封装成一个功能, 以方便重复调用
    方法的优点:
        1. 提高代码的复用性
        2. 让程序逻辑更清晰
    方法定义格式:
        修饰符 返回值类型 方法名(形参列表) {
            方法体代码(需要执行的功能代码);
            return 返回值;
        }
    方法调用格式:
        方法名(传入参数);
    定义方法两个明确:
        1. 明确返回值类型:主要明确方法执行完毕后是否有数据返回
        2. 明确参数:明确参数的类型和数量
    方法的调用流程:
        1.方法没有被调用时, 在方法区中的字节码文件存放
        2.方法在被调用时, 会进入栈内存, 并拥有自己的独立空间, 方法内部代码执行完毕后, 方法会从栈内存中弹栈消失！！
    方法参数传递机制:值传递
        1.基本类型的参数传递:
            在传输实参给方法的形参时, 并不是传输实参变量本身, 而是传输实参变量中存储的值, 属于值传递
        2.引用类型的参数传递
            也属于值传递, 不过传递参数为引用数据的地址, 通过地址访问实参数据, 且方法运行后会改变原引用数据内部元素的值！！
        异同:
            1.均属于值传递
            2.基本数据类型传递的是数据值, 引用数据类型传递的是地址值, 且引用数据类型元素内容可以被改变！！
    方法重载:
        形式:同一个类中, 出现多个方法名称相同, 形参列表不同
        优点:对于相似功能的业务场景, 可读性好, 方法名称相同提示为同一类型的功能, 通过形参不同
            实现功能差异化的选择, 是一种专业的代码设计！！
        识别重载方法的技巧:
            1. 同一个类中, 多个方法的名称相同, 形参列表不同, 其他无所谓
            2. 形参的个数/类型/顺序不同, 不关心形参的名称
    return关键字单独使用:
        return; ---> 可以立即跳出并结束当前方法的执行, return关键字单独使用可以放在任何方法中
    可变参数:
        用在形参中可以接收多个数据, 在方法内部本质上是一个数组
            格式:
                数据类型...参数名称
            作用:
                传输参数非常灵活方便, 可以不传输参数, 可以传输一个或者多个, 也可以传输一个数组
            注意:
                1. 一个形参列表可变参数只能有一个
                2. 可变参数必须放在形参列表的最后面
 */

public class $1_MethodSummarize {
    public static void main(String[] args) {
        // 定义并调用方法
        int sum = sum(10, 20);
        System.out.println(sum);
        String str = "郭鹏涛";
        sum(str);
    }
    
    public static int sum(int a, int b) {
        int c = a + b;
        return c;
    }
    
    public static void sum(String str) {
        System.out.println("字符串:" + str);
    }
}
